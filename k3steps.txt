Apply the configuration to your cluster with:

kubectl create -f pod.yaml 
pod/flask-app created

The pod will appear in the default namespace:

kubectl get pods 
NAME       READY  STATUS   RESTARTS  AGE 
flask-app  1/1    Running  0         95s

We can send traffic to the pod by forwarding its TCP port to our local computer:

kubectl port-forward flask-app 5000:5000

curl http://127.0.0.1:5000 ;echo 
Hello world

Now, check the container logs:

kubectl logs pod/flask-app 
INFO:waitress:/ invoked

kubectl get pod/flask-app --output go-template="{{.metadata.name}} {{ .status.podIP }}" ; echo; 
flask-app 10.244.0.11

kubectl delete -f pod.yaml

And re-create it:

kubectl apply -f pod.yaml

kubectl get pod/flask-app --output go-template="{{.metadata.name}} {{ .status.podIP }}" ; echo;

flask-app 10.244.0.13

create service.yaml

kubectl apply -f service.yaml

We can send traffic to the pod by forwarding its service instead:

kubectl port-forward service/flask-svc 5000:5000

curl http://127.0.0.1:5000 ;echo 
Hello world


Create another pod with a different name (pod-b.yaml):

kubectl apply -f pod-b.yaml

kubectl delete -f pod.yaml

kubectl port-forward service/flask-svc 5000:5000


curl http://127.0.0.1:5000 ;echo

create deployment.yaml

Delete your pods and apply the deployment instead:

kubectl delete -f pod.yaml,pod-b.yaml

Now apply the deployment:

kubectl create -f deployment.yaml 
deployment.apps/flask-app created

Now, port-forward the original service. It doesn’t need to be changed; invoke it a few times:

curl http://127.0.0.1:5000 ;echo 
curl http://127.0.0.1:5000 ;echo 
curl http://127.0.0.1:5000 ;echo 

kubectl logs deploy/flask-app 

kubectl get pods 
NAME                        READY  STATUS   RESTARTS  AGE 
flask-app-6c74fb9c7c-hr4s7  1/1    Running  0         54s 
flask-app-6c74fb9c7c-kzt9c  1/1    Running  0         54s 
flask-app-6c74fb9c7c-sb5f6  1/1    Running  0         54s

Now get the logs of each pod:

kubectl logs pod/flask-app-6c74fb9c7c-hr4s7 
kubectl logs pod/flask-app-6c74fb9c7c-kzt9c 
kubectl logs pod/flask-app-6c74fb9c7c-sb5f6

Given the way that kubectl port-forward works, you will see all the traffic to go to one replica. However, when external Ingress is configured, the replicas will be load-balanced.

create ingress.yaml
Now, port-forward Traefik itself:

kubectl port-forward -n kube-system service/traefik 8080:80
$ kubectl get pods 
NAME                        READY  STATUS   RESTARTS  AGE 
flask-app-6c74fb9c7c-2dzmw  1/1    Running  0         105s 
flask-app-6c74fb9c7c-vssw5  1/1    Running  0         105s
flask-app-6c74fb9c7c-dcmxj  1/1    Running  0         105s

$ kubectl logs pod/flask-app-6c74fb9c7c-2dzmw 
INFO:waitress:/ invoked 
INFO:waitress:/ invoked

$ kubectl logs pod/flask-app-6c74fb9c7c-vssw5 
INFO:waitress:/ invoked 
INFO:waitress:/ invoked

$ kubectl logs pod/flask-app-6c74fb9c7c-dcmxj 
INFO:waitress:/ invoked 
INFO:waitress:/ invoked

You can see that the requests are being load-balanced through the use of the service.


create ingress-host.yaml

kubectl apply -f ingress-host.yaml 
ingress.networking.k8s.io/flask-app created

You’ll now see that any connections without the specific host header return an error:

curl http://127.0.0.1:8080 
404 page not found

Now add the host header and run curl again:

curl http://127.0.0.1:8080 --header "Host: flask-app.example.com" 
Hello world


